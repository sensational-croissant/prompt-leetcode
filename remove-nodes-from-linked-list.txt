--------------Heap / Priority Queue--------------    # Heap / Priority Queue

    ## Code

    ``` python
    # Definition for singly-linked list.
    # class ListNode:
    #     def __init__(self, val=0, next=None):
    #         self.val = val
    #         self.next = next
    class Solution:
        def removeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:
            if not head:
                return None
            
            stack = []
            current = head
            while current:
                while stack and stack[-1].val < current.val:
                    stack.pop()
                stack.append(current)
                current = current.next
            
            for i in range(len(stack) - 1):
                stack[i].next = stack[i + 1]
            
            stack[-1].next = None
            
            return stack[0]
        
    ```

    ## Time complexity:
    The time complexity of this solution is O(n), where n is the number of nodes in the linked list.

    ## Space complexity:
    The space complexity of this solution is O(n) due to the stack used to keep track of nodes.